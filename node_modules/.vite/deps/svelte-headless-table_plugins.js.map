{
  "version": 3,
  "sources": ["../../svelte-keyed/dist/index.es.js", "../../svelte-headless-table/plugins/addColumnFilters.js", "../../svelte-headless-table/plugins/addColumnOrder.js", "../../svelte-headless-table/utils/store.js", "../../svelte-headless-table/plugins/addDataExport.js", "../../svelte-headless-table/plugins/addExpandedRows.js", "../../svelte-headless-table/plugins/addFlatten.js", "../../svelte-headless-table/plugins/addGridLayout.js", "../../svelte-headless-table/utils/event.js", "../../svelte-headless-table/plugins/addGroupBy.js", "../../svelte-headless-table/plugins/addHiddenColumns.js", "../../svelte-headless-table/plugins/addPagination.js", "../../svelte-headless-table/plugins/addResizedColumns.js", "../../svelte-headless-table/plugins/addSelectedRows.js", "../../svelte-headless-table/utils/compare.js", "../../svelte-headless-table/plugins/addSortBy.js", "../../svelte-headless-table/plugins/addSubRows.js", "../../svelte-headless-table/plugins/addTableFilter.js"],
  "sourcesContent": ["import { derived } from 'svelte/store';\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nfunction __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\n\nvar getTokens = function (key) {\n    var keyWithoutBracket = key.replace(/\\[(\\d+)\\]/g, '.$1');\n    if (keyWithoutBracket.startsWith('.')) {\n        keyWithoutBracket = keyWithoutBracket.slice(1);\n    }\n    return keyWithoutBracket.split('.');\n};\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nvar getNested = function (root, keyTokens) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    var current = root;\n    for (var _i = 0, keyTokens_1 = keyTokens; _i < keyTokens_1.length; _i++) {\n        var key = keyTokens_1[_i];\n        if (current == null) {\n            return undefined;\n        }\n        current = current[key];\n    }\n    return current;\n};\nvar clonedWithPrototype = function (source) {\n    var clone = Object.create(source);\n    Object.assign(clone, source);\n    return clone;\n};\nfunction keyed(parent, path) {\n    var keyTokens = getTokens(path);\n    if (keyTokens.some(function (token) { return token === '__proto__'; })) {\n        throw new Error('key cannot include \"__proto__\"');\n    }\n    var branchTokens = keyTokens.slice(0, keyTokens.length - 1);\n    var leafToken = keyTokens[keyTokens.length - 1];\n    var keyedValue = derived(parent, function ($parent) {\n        return getNested($parent, keyTokens);\n    });\n    var set = function (value) {\n        parent.update(function ($parent) {\n            if ($parent == null) {\n                return $parent;\n            }\n            var newParent = Array.isArray($parent)\n                ? __spreadArray([], $parent, true) : clonedWithPrototype($parent);\n            getNested(newParent, branchTokens)[leafToken] = value;\n            return newParent;\n        });\n    };\n    var update = function (fn) {\n        parent.update(function ($parent) {\n            if ($parent == null) {\n                return $parent;\n            }\n            var newValue = fn(getNested($parent, keyTokens));\n            var newParent = Array.isArray($parent)\n                ? __spreadArray([], $parent, true) : clonedWithPrototype($parent);\n            getNested(newParent, branchTokens)[leafToken] = newValue;\n            return newParent;\n        });\n    };\n    return {\n        subscribe: keyedValue.subscribe,\n        set: set,\n        update: update,\n    };\n}\n\nexport { getTokens, keyed };\n", "import { keyed } from 'svelte-keyed';\nimport { derived, writable } from 'svelte/store';\nconst getFilteredRows = (rows, filterValues, columnOptions) => {\n    const $filteredRows = rows\n        // Filter `subRows`\n        .map((row) => {\n        const { subRows } = row;\n        if (subRows === undefined) {\n            return row;\n        }\n        const filteredSubRows = getFilteredRows(subRows, filterValues, columnOptions);\n        const clonedRow = row.clone();\n        clonedRow.subRows = filteredSubRows;\n        return clonedRow;\n    })\n        .filter((row) => {\n        if ((row.subRows?.length ?? 0) !== 0) {\n            return true;\n        }\n        for (const [columnId, columnOption] of Object.entries(columnOptions)) {\n            const bodyCell = row.cellForId[columnId];\n            if (!bodyCell.isData()) {\n                continue;\n            }\n            const { value } = bodyCell;\n            const filterValue = filterValues[columnId];\n            if (filterValue === undefined) {\n                continue;\n            }\n            const isMatch = columnOption.fn({ value, filterValue });\n            if (!isMatch) {\n                return false;\n            }\n        }\n        return true;\n    });\n    return $filteredRows;\n};\nexport const addColumnFilters = ({ serverSide = false } = {}) => ({ columnOptions, tableState }) => {\n    const filterValues = writable({});\n    const preFilteredRows = writable([]);\n    const filteredRows = writable([]);\n    const pluginState = { filterValues, preFilteredRows };\n    const deriveRows = (rows) => {\n        return derived([rows, filterValues], ([$rows, $filterValues]) => {\n            preFilteredRows.set($rows);\n            if (serverSide) {\n                filteredRows.set($rows);\n                return $rows;\n            }\n            const _filteredRows = getFilteredRows($rows, $filterValues, columnOptions);\n            filteredRows.set(_filteredRows);\n            return _filteredRows;\n        });\n    };\n    return {\n        pluginState,\n        deriveRows,\n        hooks: {\n            'thead.tr.th': (headerCell) => {\n                const filterValue = keyed(filterValues, headerCell.id);\n                const props = derived([], () => {\n                    const columnOption = columnOptions[headerCell.id];\n                    if (columnOption === undefined) {\n                        return undefined;\n                    }\n                    filterValue.set(columnOption.initialFilterValue);\n                    const preFilteredValues = derived(preFilteredRows, ($rows) => {\n                        if (headerCell.isData()) {\n                            return $rows.map((row) => {\n                                // TODO check and handle different BodyCell types\n                                const cell = row.cellForId[headerCell.id];\n                                return cell?.value;\n                            });\n                        }\n                        return [];\n                    });\n                    const values = derived(filteredRows, ($rows) => {\n                        if (headerCell.isData()) {\n                            return $rows.map((row) => {\n                                // TODO check and handle different BodyCell types\n                                const cell = row.cellForId[headerCell.id];\n                                return cell?.value;\n                            });\n                        }\n                        return [];\n                    });\n                    const render = columnOption.render({\n                        id: headerCell.id,\n                        filterValue,\n                        ...tableState,\n                        values,\n                        preFilteredRows,\n                        preFilteredValues,\n                    });\n                    return { render };\n                });\n                return { props };\n            },\n        },\n    };\n};\nexport const matchFilter = ({ filterValue, value }) => {\n    if (filterValue === undefined) {\n        return true;\n    }\n    return filterValue === value;\n};\nexport const textPrefixFilter = ({ filterValue, value }) => {\n    if (filterValue === '') {\n        return true;\n    }\n    return String(value).toLowerCase().startsWith(String(filterValue).toLowerCase());\n};\nexport const numberRangeFilter = ({ filterValue: [min, max], value, }) => {\n    return (min ?? -Infinity) <= value && value <= (max ?? Infinity);\n};\n", "import { derived, writable } from 'svelte/store';\nexport const addColumnOrder = ({ initialColumnIdOrder = [], hideUnspecifiedColumns = false, } = {}) => () => {\n    const columnIdOrder = writable(initialColumnIdOrder);\n    const pluginState = { columnIdOrder };\n    const deriveFlatColumns = (flatColumns) => {\n        return derived([flatColumns, columnIdOrder], ([$flatColumns, $columnIdOrder]) => {\n            const _flatColumns = [...$flatColumns];\n            const orderedFlatColumns = [];\n            $columnIdOrder.forEach((id) => {\n                const colIdx = _flatColumns.findIndex((c) => c.id === id);\n                orderedFlatColumns.push(..._flatColumns.splice(colIdx, 1));\n            });\n            if (!hideUnspecifiedColumns) {\n                // Push the remaining unspecified columns.\n                orderedFlatColumns.push(..._flatColumns);\n            }\n            return orderedFlatColumns;\n        });\n    };\n    return {\n        pluginState,\n        deriveFlatColumns,\n    };\n};\n", "import { readable, writable } from 'svelte/store';\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const isReadable = (value) => {\n    return value?.subscribe instanceof Function;\n};\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const isWritable = (store) => {\n    return store?.update instanceof Function && store.set instanceof Function;\n};\nexport const Undefined = readable(undefined);\nexport const UndefinedAs = () => Undefined;\nexport const arraySetStore = (initial = [], { isEqual = (a, b) => a === b } = {}) => {\n    const { subscribe, update, set } = writable(initial);\n    const toggle = (item, { clearOthers = false } = {}) => {\n        update(($arraySet) => {\n            const index = $arraySet.findIndex(($item) => isEqual($item, item));\n            if (index === -1) {\n                if (clearOthers) {\n                    return [item];\n                }\n                return [...$arraySet, item];\n            }\n            if (clearOthers) {\n                return [];\n            }\n            return [...$arraySet.slice(0, index), ...$arraySet.slice(index + 1)];\n        });\n    };\n    const add = (item) => {\n        update(($arraySet) => {\n            const index = $arraySet.findIndex(($item) => isEqual($item, item));\n            if (index === -1) {\n                return [...$arraySet, item];\n            }\n            return $arraySet;\n        });\n    };\n    const remove = (item) => {\n        update(($arraySet) => {\n            const index = $arraySet.findIndex(($item) => isEqual($item, item));\n            if (index === -1) {\n                return $arraySet;\n            }\n            return [...$arraySet.slice(0, index), ...$arraySet.slice(index + 1)];\n        });\n    };\n    const clear = () => {\n        set([]);\n    };\n    return {\n        subscribe,\n        update,\n        set,\n        toggle,\n        add,\n        remove,\n        clear,\n    };\n};\nexport const recordSetStore = (initial = {}) => {\n    const withFalseRemoved = (record) => {\n        return Object.fromEntries(Object.entries(record).filter(([, v]) => v));\n    };\n    const { subscribe, update, set } = writable(withFalseRemoved(initial));\n    const updateAndRemoveFalse = (fn) => {\n        update(($recordSet) => {\n            const newRecordSet = fn($recordSet);\n            return withFalseRemoved(newRecordSet);\n        });\n    };\n    const toggle = (item) => {\n        update(($recordSet) => {\n            if ($recordSet[item] === true) {\n                delete $recordSet[item];\n                return $recordSet;\n            }\n            return {\n                ...$recordSet,\n                [item]: true,\n            };\n        });\n    };\n    const add = (item) => {\n        update(($recordSet) => ({\n            ...$recordSet,\n            [item]: true,\n        }));\n    };\n    const addAll = (items) => {\n        update(($recordSet) => ({\n            ...$recordSet,\n            ...Object.fromEntries(items.map((item) => [item, true])),\n        }));\n    };\n    const remove = (item) => {\n        update(($recordSet) => {\n            delete $recordSet[item];\n            return $recordSet;\n        });\n    };\n    const removeAll = (items) => {\n        update(($recordSet) => {\n            for (const item of items) {\n                delete $recordSet[item];\n            }\n            return $recordSet;\n        });\n    };\n    const clear = () => {\n        set({});\n    };\n    return {\n        subscribe,\n        update: updateAndRemoveFalse,\n        set: (newValue) => updateAndRemoveFalse(() => newValue),\n        toggle,\n        add,\n        addAll,\n        remove,\n        removeAll,\n        clear,\n    };\n};\n", "import { isReadable } from '../utils/store';\nimport { derived, get } from 'svelte/store';\nconst getObjectsFromRows = (rows, ids, childrenKey) => {\n    return rows.map((row) => {\n        const dataObject = Object.fromEntries(ids.map((id) => {\n            const cell = row.cellForId[id];\n            if (cell.isData()) {\n                return [id, cell.value];\n            }\n            if (cell.isDisplay() && cell.column.data !== undefined) {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                let data = cell.column.data(cell, row.state);\n                if (isReadable(data)) {\n                    data = get(data);\n                }\n                return [id, data];\n            }\n            return [id, null];\n        }));\n        if (row.subRows !== undefined) {\n            dataObject[childrenKey] = getObjectsFromRows(row.subRows, ids, childrenKey);\n        }\n        return dataObject;\n    });\n};\nconst getCsvFromRows = (rows, ids) => {\n    const dataLines = rows.map((row) => {\n        const line = ids.map((id) => {\n            const cell = row.cellForId[id];\n            if (cell.isData()) {\n                return cell.value;\n            }\n            if (cell.isDisplay() && cell.column.data !== undefined) {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                let data = cell.column.data(cell, row.state);\n                if (isReadable(data)) {\n                    data = get(data);\n                }\n                return data;\n            }\n            return null;\n        });\n        return line.join(',');\n    });\n    const headerLine = ids.join(',');\n    return headerLine + '\\n' + dataLines.join('\\n');\n};\nexport const addDataExport = ({ format = 'object', childrenKey = 'children', } = {}) => ({ tableState, columnOptions }) => {\n    const excludedIds = Object.entries(columnOptions)\n        .filter(([, option]) => option.exclude === true)\n        .map(([columnId]) => columnId);\n    const { visibleColumns, rows } = tableState;\n    const exportedIds = derived(visibleColumns, ($visibleColumns) => $visibleColumns.map((c) => c.id).filter((id) => !excludedIds.includes(id)));\n    const exportedData = derived([rows, exportedIds], ([$rows, $exportedIds]) => {\n        switch (format) {\n            case 'json':\n                return JSON.stringify(getObjectsFromRows($rows, $exportedIds, childrenKey));\n            case 'csv':\n                return getCsvFromRows($rows, $exportedIds);\n            default:\n                return getObjectsFromRows($rows, $exportedIds, childrenKey);\n        }\n    });\n    const pluginState = { exportedData };\n    return {\n        pluginState,\n    };\n};\n", "import { recordSetStore } from '../utils/store';\nimport { keyed } from 'svelte-keyed';\nimport { derived, readable } from 'svelte/store';\nconst withExpandedRows = (row, expandedIds) => {\n    if (row.subRows === undefined) {\n        return [row];\n    }\n    if (expandedIds[row.id] !== true) {\n        return [row];\n    }\n    const expandedSubRows = row.subRows.flatMap((subRow) => withExpandedRows(subRow, expandedIds));\n    return [row, ...expandedSubRows];\n};\nexport const addExpandedRows = ({ initialExpandedIds = {} } = {}) => () => {\n    const expandedIds = recordSetStore(initialExpandedIds);\n    const getRowState = (row) => {\n        const isExpanded = keyed(expandedIds, row.id);\n        const canExpand = readable((row.subRows?.length ?? 0) > 0);\n        const subRowExpandedIds = derived(expandedIds, ($expandedIds) => {\n            // Check prefix with '>' to match child ids while ignoring this row's id.\n            return Object.entries($expandedIds).filter(([id, expanded]) => id.startsWith(`${row.id}>`) && expanded);\n        });\n        // If the number of expanded subRows is equal to the number of subRows\n        // that can expand, then all subRows are expanded.\n        const isAllSubRowsExpanded = derived(subRowExpandedIds, ($subRowExpandedIds) => {\n            if (row.subRows === undefined) {\n                return true;\n            }\n            // canExpand is derived from the presence of the `subRows` property.\n            const expandableSubRows = row.subRows.filter((subRow) => subRow.subRows !== undefined);\n            return $subRowExpandedIds.length === expandableSubRows.length;\n        });\n        return {\n            isExpanded,\n            canExpand,\n            isAllSubRowsExpanded,\n        };\n    };\n    const pluginState = { expandedIds, getRowState };\n    const deriveRows = (rows) => {\n        return derived([rows, expandedIds], ([$rows, $expandedIds]) => {\n            return $rows.flatMap((row) => {\n                return withExpandedRows(row, $expandedIds);\n            });\n        });\n    };\n    return {\n        pluginState,\n        deriveRows,\n    };\n};\n", "import { derived, writable } from 'svelte/store';\nexport const getFlattenedRows = (rows, depth) => {\n    if (depth === 0)\n        return rows;\n    const flattenedRows = [];\n    for (const row of rows) {\n        if (row.subRows === undefined)\n            continue;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        flattenedRows.push(...getFlattenedRows(row.subRows, depth - 1));\n    }\n    return flattenedRows;\n};\nexport const addFlatten = ({ initialDepth = 0 } = {}) => () => {\n    const depth = writable(initialDepth);\n    const pluginState = { depth };\n    const deriveRows = (rows) => {\n        return derived([rows, depth], ([$rows, $depth]) => {\n            return getFlattenedRows($rows, $depth);\n        });\n    };\n    return {\n        pluginState,\n        deriveRows,\n        hooks: {\n            'tbody.tr.td': () => {\n                const props = derived([], () => {\n                    const flatten = ($depth) => {\n                        depth.set($depth);\n                    };\n                    const unflatten = () => flatten(0);\n                    return { flatten, unflatten };\n                });\n                return { props };\n            },\n        },\n    };\n};\n", "import { derived } from 'svelte/store';\nexport const addGridLayout = () => ({ tableState }) => {\n    const pluginState = {};\n    const deriveTableAttrs = (attrs) => {\n        return derived([attrs, tableState.visibleColumns], ([$attrs, $visibleColumns]) => {\n            return {\n                ...$attrs,\n                style: {\n                    display: 'grid',\n                    'grid-template-columns': `repeat(${$visibleColumns.length}, auto)`,\n                },\n            };\n        });\n    };\n    const deriveTableHeadAttrs = (attrs) => {\n        return derived(attrs, ($attrs) => {\n            return {\n                ...$attrs,\n                style: {\n                    display: 'contents',\n                },\n            };\n        });\n    };\n    const deriveTableBodyAttrs = (attrs) => {\n        return derived(attrs, ($attrs) => {\n            return {\n                ...$attrs,\n                style: {\n                    display: 'contents',\n                },\n            };\n        });\n    };\n    return {\n        pluginState,\n        deriveTableAttrs,\n        deriveTableHeadAttrs,\n        deriveTableBodyAttrs,\n        hooks: {\n            'thead.tr': () => {\n                const attrs = derived([], () => {\n                    return {\n                        style: {\n                            display: 'contents',\n                        },\n                    };\n                });\n                return { attrs };\n            },\n            'thead.tr.th': (cell) => {\n                const attrs = derived([], () => {\n                    return {\n                        style: {\n                            'grid-column': `${cell.colstart + 1} / span ${cell.colspan}`,\n                        },\n                    };\n                });\n                return { attrs };\n            },\n            'tbody.tr': () => {\n                const attrs = derived([], () => {\n                    return {\n                        style: {\n                            display: 'contents',\n                        },\n                    };\n                });\n                return { attrs };\n            },\n        },\n    };\n};\n", "export const isShiftClick = (event) => {\n    if (!(event instanceof MouseEvent))\n        return false;\n    return event.shiftKey;\n};\n", "import { DataBodyCell } from '../bodyCells';\nimport { BodyRow, DisplayBodyRow } from '../bodyRows';\nimport { isShiftClick } from '../utils/event';\nimport { nonUndefined } from '../utils/filter';\nimport { arraySetStore } from '../utils/store';\nimport { derived, writable } from 'svelte/store';\nconst getIdPrefix = (id) => {\n    const prefixTokens = id.split('>').slice(0, -1);\n    if (prefixTokens.length === 0) {\n        return '';\n    }\n    return `${prefixTokens.join('>')}>`;\n};\nconst getIdLeaf = (id) => {\n    const tokens = id.split('>');\n    return tokens[tokens.length - 1] ?? '';\n};\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst deepenIdAndDepth = (row, parentId) => {\n    row.id = `${parentId}>${row.id}`;\n    row.depth = row.depth + 1;\n    row.subRows?.forEach((subRow) => deepenIdAndDepth(subRow, parentId));\n};\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const getGroupedRows = (rows, groupByIds, columnOptions, { repeatCellIds, aggregateCellIds, groupCellIds, allGroupByIds }) => {\n    if (groupByIds.length === 0) {\n        return rows;\n    }\n    if (rows.length === 0) {\n        return rows;\n    }\n    const idPrefix = getIdPrefix(rows[0].id);\n    const [groupById, ...restIds] = groupByIds;\n    const subRowsForGroupOnValue = new Map();\n    for (const row of rows) {\n        const cell = row.cellForId[groupById];\n        if (!cell.isData()) {\n            break;\n        }\n        const columnOption = columnOptions[groupById] ?? {};\n        const { getGroupOn } = columnOption;\n        const groupOnValue = getGroupOn?.(cell.value) ?? cell.value;\n        if (typeof groupOnValue === 'function' || typeof groupOnValue === 'object') {\n            console.warn(`Missing \\`getGroupOn\\` column option to aggregate column \"${groupById}\" with object values`);\n        }\n        const subRows = subRowsForGroupOnValue.get(groupOnValue) ?? [];\n        subRowsForGroupOnValue.set(groupOnValue, [...subRows, row]);\n    }\n    const groupedRows = [];\n    let groupRowIdx = 0;\n    for (const [groupOnValue, subRows] of subRowsForGroupOnValue.entries()) {\n        // Guaranteed to have at least one subRow.\n        const firstRow = subRows[0];\n        const groupRow = new DisplayBodyRow({\n            id: `${idPrefix}${groupRowIdx++}`,\n            // TODO Differentiate data rows and grouped rows.\n            depth: firstRow.depth,\n            cells: [],\n            cellForId: {},\n        });\n        const groupRowCellForId = Object.fromEntries(Object.entries(firstRow.cellForId).map(([id, cell]) => {\n            if (id === groupById) {\n                const newCell = new DataBodyCell({\n                    column: cell.column,\n                    row: groupRow,\n                    value: groupOnValue,\n                });\n                return [id, newCell];\n            }\n            const columnCells = subRows.map((row) => row.cellForId[id]).filter(nonUndefined);\n            if (!columnCells[0].isData()) {\n                const clonedCell = columnCells[0].clone();\n                clonedCell.row = groupRow;\n                return [id, clonedCell];\n            }\n            const { cell: label, getAggregateValue } = columnOptions[id] ?? {};\n            const columnValues = columnCells.map((cell) => cell.value);\n            const value = getAggregateValue === undefined ? '' : getAggregateValue(columnValues);\n            const newCell = new DataBodyCell({\n                column: cell.column,\n                row: groupRow,\n                value,\n                label,\n            });\n            return [id, newCell];\n        }));\n        const groupRowCells = firstRow.cells.map((cell) => {\n            return groupRowCellForId[cell.id];\n        });\n        groupRow.cellForId = groupRowCellForId;\n        groupRow.cells = groupRowCells;\n        const groupRowSubRows = subRows.map((subRow) => {\n            const clonedSubRow = subRow.clone({ includeCells: true, includeSubRows: true });\n            deepenIdAndDepth(clonedSubRow, groupRow.id);\n            return clonedSubRow;\n        });\n        groupRow.subRows = getGroupedRows(groupRowSubRows, restIds, columnOptions, {\n            repeatCellIds,\n            aggregateCellIds,\n            groupCellIds,\n            allGroupByIds,\n        });\n        groupedRows.push(groupRow);\n        groupRow.cells.forEach((cell) => {\n            if (cell.id === groupById) {\n                groupCellIds[cell.rowColId()] = true;\n            }\n            else {\n                aggregateCellIds[cell.rowColId()] = true;\n            }\n        });\n        groupRow.subRows.forEach((subRow) => {\n            subRow.parentRow = groupRow;\n            subRow.cells.forEach((cell) => {\n                if (allGroupByIds.includes(cell.id) && groupCellIds[cell.rowColId()] !== true) {\n                    repeatCellIds[cell.rowColId()] = true;\n                }\n            });\n        });\n    }\n    return groupedRows;\n};\nexport const addGroupBy = ({ initialGroupByIds = [], disableMultiGroup = false, isMultiGroupEvent = isShiftClick, } = {}) => ({ columnOptions }) => {\n    const disabledGroupIds = Object.entries(columnOptions)\n        .filter(([, option]) => option.disable === true)\n        .map(([columnId]) => columnId);\n    const groupByIds = arraySetStore(initialGroupByIds);\n    const repeatCellIds = writable({});\n    const aggregateCellIds = writable({});\n    const groupCellIds = writable({});\n    const pluginState = {\n        groupByIds,\n    };\n    const deriveRows = (rows) => {\n        return derived([rows, groupByIds], ([$rows, $groupByIds]) => {\n            const $repeatCellIds = {};\n            const $aggregateCellIds = {};\n            const $groupCellIds = {};\n            const $groupedRows = getGroupedRows($rows, $groupByIds, columnOptions, {\n                repeatCellIds: $repeatCellIds,\n                aggregateCellIds: $aggregateCellIds,\n                groupCellIds: $groupCellIds,\n                allGroupByIds: $groupByIds,\n            });\n            repeatCellIds.set($repeatCellIds);\n            aggregateCellIds.set($aggregateCellIds);\n            groupCellIds.set($groupCellIds);\n            return $groupedRows;\n        });\n    };\n    return {\n        pluginState,\n        deriveRows,\n        hooks: {\n            'thead.tr.th': (cell) => {\n                const disabled = disabledGroupIds.includes(cell.id) || !cell.isData();\n                const props = derived(groupByIds, ($groupByIds) => {\n                    const grouped = $groupByIds.includes(cell.id);\n                    const toggle = (event) => {\n                        if (!cell.isData())\n                            return;\n                        if (disabled)\n                            return;\n                        groupByIds.toggle(cell.id, {\n                            clearOthers: disableMultiGroup || !isMultiGroupEvent(event),\n                        });\n                    };\n                    const clear = () => {\n                        groupByIds.remove(cell.id);\n                    };\n                    return {\n                        grouped,\n                        toggle,\n                        clear,\n                        disabled,\n                    };\n                });\n                return { props };\n            },\n            'tbody.tr.td': (cell) => {\n                const props = derived([repeatCellIds, aggregateCellIds, groupCellIds], ([$repeatCellIds, $aggregateCellIds, $groupCellIds]) => {\n                    return {\n                        repeated: $repeatCellIds[cell.rowColId()] === true,\n                        aggregated: $aggregateCellIds[cell.rowColId()] === true,\n                        grouped: $groupCellIds[cell.rowColId()] === true,\n                    };\n                });\n                return { props };\n            },\n        },\n    };\n};\n", "import { derived, writable } from 'svelte/store';\nexport const addHiddenColumns = ({ initialHiddenColumnIds = [] } = {}) => () => {\n    const hiddenColumnIds = writable(initialHiddenColumnIds);\n    const pluginState = { hiddenColumnIds };\n    const deriveFlatColumns = (flatColumns) => {\n        return derived([flatColumns, hiddenColumnIds], ([$flatColumns, $hiddenColumnIds]) => {\n            if ($hiddenColumnIds.length === 0) {\n                return $flatColumns;\n            }\n            return $flatColumns.filter((c) => !$hiddenColumnIds.includes(c.id));\n        });\n    };\n    return {\n        pluginState,\n        deriveFlatColumns,\n    };\n};\n", "import { derived, writable } from 'svelte/store';\nconst MIN_PAGE_SIZE = 1;\nexport const createPageStore = ({ items, initialPageSize, initialPageIndex, serverSide, }) => {\n    const pageSize = writable(initialPageSize);\n    const updatePageSize = (fn) => {\n        pageSize.update(($pageSize) => {\n            const newPageSize = fn($pageSize);\n            return Math.max(newPageSize, MIN_PAGE_SIZE);\n        });\n    };\n    const setPageSize = (newPageSize) => updatePageSize(() => newPageSize);\n    const pageIndex = writable(initialPageIndex);\n    function calcPageCountAndLimitIndex([$pageSize, $itemCount]) {\n        const $pageCount = Math.ceil($itemCount / $pageSize);\n        pageIndex.update(($pageIndex) => {\n            if ($pageCount > 0 && $pageIndex >= $pageCount) {\n                return $pageCount - 1;\n            }\n            return $pageIndex;\n        });\n        return $pageCount;\n    }\n    const serverItemCount = writable(0);\n    let pageCount;\n    if (serverSide) {\n        pageCount = derived([pageSize, serverItemCount], calcPageCountAndLimitIndex);\n    }\n    else {\n        const itemCount = derived(items, ($items) => $items.length);\n        pageCount = derived([pageSize, itemCount], calcPageCountAndLimitIndex);\n    }\n    const hasPreviousPage = derived(pageIndex, ($pageIndex) => {\n        return $pageIndex > 0;\n    });\n    const hasNextPage = derived([pageIndex, pageCount], ([$pageIndex, $pageCount]) => {\n        return $pageIndex < $pageCount - 1;\n    });\n    return {\n        pageSize: {\n            subscribe: pageSize.subscribe,\n            update: updatePageSize,\n            set: setPageSize,\n        },\n        pageIndex,\n        pageCount,\n        serverItemCount,\n        hasPreviousPage,\n        hasNextPage,\n    };\n};\nexport const addPagination = ({ initialPageIndex = 0, initialPageSize = 10, serverSide = false, } = {}) => () => {\n    const prePaginatedRows = writable([]);\n    const paginatedRows = writable([]);\n    const { pageSize, pageIndex, pageCount, serverItemCount, hasPreviousPage, hasNextPage } = createPageStore({\n        items: prePaginatedRows,\n        initialPageIndex,\n        initialPageSize,\n        serverSide,\n    });\n    const pluginState = {\n        pageSize,\n        pageIndex,\n        pageCount,\n        serverItemCount,\n        hasPreviousPage,\n        hasNextPage,\n    };\n    const derivePageRows = (rows) => {\n        return derived([rows, pageSize, pageIndex], ([$rows, $pageSize, $pageIndex]) => {\n            prePaginatedRows.set($rows);\n            if (serverSide) {\n                paginatedRows.set($rows);\n                return $rows;\n            }\n            const startIdx = $pageIndex * $pageSize;\n            const _paginatedRows = $rows.slice(startIdx, startIdx + $pageSize);\n            paginatedRows.set(_paginatedRows);\n            return _paginatedRows;\n        });\n    };\n    return {\n        pluginState,\n        derivePageRows,\n    };\n};\n", "import { sum } from '../utils/math';\nimport { keyed } from 'svelte-keyed';\nimport { derived, writable } from 'svelte/store';\nconst getDragXPos = (event) => {\n    if (event instanceof MouseEvent)\n        return event.clientX;\n    if (event instanceof TouchEvent)\n        return event.targetTouches[0].pageX;\n    return 0;\n};\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst isCellDisabled = (cell, disabledIds) => {\n    if (disabledIds.includes(cell.id))\n        return true;\n    if (cell.isGroup() && cell.ids.every((id) => disabledIds.includes(id))) {\n        return true;\n    }\n    return false;\n};\nexport const addResizedColumns = ({ onResizeEnd } = {}) => ({ columnOptions }) => {\n    const disabledResizeIds = Object.entries(columnOptions)\n        .filter(([, option]) => option.disable === true)\n        .map(([columnId]) => columnId);\n    const initialWidths = Object.fromEntries(Object.entries(columnOptions)\n        .filter(([, option]) => option.initialWidth !== undefined)\n        .map(([columnId, { initialWidth }]) => [columnId, initialWidth]));\n    const columnsWidthState = writable({\n        current: initialWidths,\n        start: {},\n    });\n    const columnWidths = keyed(columnsWidthState, 'current');\n    const pluginState = { columnWidths };\n    const dragStartXPosForId = {};\n    const nodeForId = {};\n    return {\n        pluginState,\n        hooks: {\n            'thead.tr.th': (cell) => {\n                const dragStart = (event) => {\n                    if (isCellDisabled(cell, disabledResizeIds))\n                        return;\n                    const { target } = event;\n                    if (target === null)\n                        return;\n                    event.stopPropagation();\n                    event.preventDefault();\n                    dragStartXPosForId[cell.id] = getDragXPos(event);\n                    columnsWidthState.update(($columnsWidthState) => {\n                        const $updatedState = {\n                            ...$columnsWidthState,\n                            start: { ...$columnsWidthState.start },\n                        };\n                        if (cell.isGroup()) {\n                            cell.ids.forEach((id) => {\n                                $updatedState.start[id] = $columnsWidthState.current[id];\n                            });\n                        }\n                        else {\n                            $updatedState.start[cell.id] = $columnsWidthState.current[cell.id];\n                        }\n                        return $updatedState;\n                    });\n                    if (event instanceof MouseEvent) {\n                        window.addEventListener('mousemove', dragMove);\n                        window.addEventListener('mouseup', dragEnd);\n                    }\n                    else {\n                        window.addEventListener('touchmove', dragMove);\n                        window.addEventListener('touchend', dragEnd);\n                    }\n                };\n                const dragMove = (event) => {\n                    event.stopPropagation();\n                    event.preventDefault();\n                    const deltaWidth = getDragXPos(event) - dragStartXPosForId[cell.id];\n                    columnsWidthState.update(($columnsWidthState) => {\n                        const $updatedState = {\n                            ...$columnsWidthState,\n                            current: { ...$columnsWidthState.current },\n                        };\n                        if (cell.isGroup()) {\n                            const enabledIds = cell.ids.filter((id) => !disabledResizeIds.includes(id));\n                            const totalStartWidth = sum(enabledIds.map((id) => $columnsWidthState.start[id]));\n                            enabledIds.forEach((id) => {\n                                const startWidth = $columnsWidthState.start[id];\n                                if (startWidth !== undefined) {\n                                    $updatedState.current[id] = Math.max(0, startWidth + deltaWidth * (startWidth / totalStartWidth));\n                                }\n                            });\n                        }\n                        else {\n                            const startWidth = $columnsWidthState.start[cell.id];\n                            const { minWidth = 0, maxWidth } = columnOptions[cell.id] ?? {};\n                            if (startWidth !== undefined) {\n                                $updatedState.current[cell.id] = Math.min(Math.max(minWidth, startWidth + deltaWidth), ...(maxWidth === undefined ? [] : [maxWidth]));\n                            }\n                        }\n                        return $updatedState;\n                    });\n                };\n                const dragEnd = (event) => {\n                    event.stopPropagation();\n                    event.preventDefault();\n                    if (cell.isGroup()) {\n                        cell.ids.forEach((id) => {\n                            const node = nodeForId[id];\n                            if (node !== undefined) {\n                                columnWidths.update(($columnWidths) => ({\n                                    ...$columnWidths,\n                                    [id]: node.getBoundingClientRect().width,\n                                }));\n                            }\n                        });\n                    }\n                    else {\n                        const node = nodeForId[cell.id];\n                        if (node !== undefined) {\n                            columnWidths.update(($columnWidths) => ({\n                                ...$columnWidths,\n                                [cell.id]: node.getBoundingClientRect().width,\n                            }));\n                        }\n                    }\n                    onResizeEnd?.(event);\n                    if (event instanceof MouseEvent) {\n                        window.removeEventListener('mousemove', dragMove);\n                        window.removeEventListener('mouseup', dragEnd);\n                    }\n                    else {\n                        window.removeEventListener('touchmove', dragMove);\n                        window.removeEventListener('touchend', dragEnd);\n                    }\n                };\n                const $props = (node) => {\n                    nodeForId[cell.id] = node;\n                    if (cell.isFlat()) {\n                        columnWidths.update(($columnWidths) => ({\n                            ...$columnWidths,\n                            [cell.id]: node.getBoundingClientRect().width,\n                        }));\n                    }\n                    return {\n                        destroy() {\n                            delete nodeForId[cell.id];\n                        },\n                    };\n                };\n                $props.drag = (node) => {\n                    node.addEventListener('mousedown', dragStart);\n                    node.addEventListener('touchstart', dragStart);\n                    return {\n                        destroy() {\n                            node.removeEventListener('mousedown', dragStart);\n                            node.removeEventListener('touchstart', dragStart);\n                        },\n                    };\n                };\n                $props.disabled = isCellDisabled(cell, disabledResizeIds);\n                const props = derived([], () => {\n                    return $props;\n                });\n                const attrs = derived(columnWidths, ($columnWidths) => {\n                    const width = cell.isGroup()\n                        ? sum(cell.ids.map((id) => $columnWidths[id]))\n                        : $columnWidths[cell.id];\n                    if (width === undefined) {\n                        return {};\n                    }\n                    const widthPx = `${width}px`;\n                    return {\n                        style: {\n                            width: widthPx,\n                            'min-width': widthPx,\n                            'max-width': widthPx,\n                            'box-sizing': 'border-box',\n                        },\n                    };\n                });\n                return { props, attrs };\n            },\n            'tbody.tr.td': (cell) => {\n                const attrs = derived(columnWidths, ($columnWidths) => {\n                    const width = $columnWidths[cell.id];\n                    if (width === undefined) {\n                        return {};\n                    }\n                    const widthPx = `${width}px`;\n                    return {\n                        style: {\n                            width: widthPx,\n                            'min-width': widthPx,\n                            'max-width': widthPx,\n                            'box-sizing': 'border-box',\n                        },\n                    };\n                });\n                return { attrs };\n            },\n        },\n    };\n};\n", "import { nonNull } from '../utils/filter';\nimport { recordSetStore } from '../utils/store';\nimport { derived, get } from 'svelte/store';\nconst isAllSubRowsSelectedForRow = (row, $selectedDataIds, linkDataSubRows) => {\n    if (row.isData()) {\n        if (!linkDataSubRows || row.subRows === undefined) {\n            return $selectedDataIds[row.dataId] === true;\n        }\n    }\n    if (row.subRows === undefined) {\n        return false;\n    }\n    return row.subRows.every((subRow) => isAllSubRowsSelectedForRow(subRow, $selectedDataIds, linkDataSubRows));\n};\nconst isSomeSubRowsSelectedForRow = (row, $selectedDataIds, linkDataSubRows) => {\n    if (row.isData()) {\n        if (!linkDataSubRows || row.subRows === undefined) {\n            return $selectedDataIds[row.dataId] === true;\n        }\n    }\n    if (row.subRows === undefined) {\n        return false;\n    }\n    return row.subRows.some((subRow) => isSomeSubRowsSelectedForRow(subRow, $selectedDataIds, linkDataSubRows));\n};\nconst writeSelectedDataIds = (row, value, $selectedDataIds, linkDataSubRows) => {\n    if (row.isData()) {\n        $selectedDataIds[row.dataId] = value;\n        if (!linkDataSubRows) {\n            return;\n        }\n    }\n    if (row.subRows === undefined) {\n        return;\n    }\n    row.subRows.forEach((subRow) => {\n        writeSelectedDataIds(subRow, value, $selectedDataIds, linkDataSubRows);\n    });\n};\nconst getRowIsSelectedStore = (row, selectedDataIds, linkDataSubRows) => {\n    const { subscribe } = derived(selectedDataIds, ($selectedDataIds) => {\n        if (row.isData()) {\n            if (!linkDataSubRows) {\n                return $selectedDataIds[row.dataId] === true;\n            }\n            if ($selectedDataIds[row.dataId] === true) {\n                return true;\n            }\n        }\n        return isAllSubRowsSelectedForRow(row, $selectedDataIds, linkDataSubRows);\n    });\n    const update = (fn) => {\n        selectedDataIds.update(($selectedDataIds) => {\n            const oldValue = isAllSubRowsSelectedForRow(row, $selectedDataIds, linkDataSubRows);\n            const $updatedSelectedDataIds = { ...$selectedDataIds };\n            writeSelectedDataIds(row, fn(oldValue), $updatedSelectedDataIds, linkDataSubRows);\n            if (row.parentRow !== undefined && row.parentRow.isData()) {\n                $updatedSelectedDataIds[row.parentRow.dataId] = isAllSubRowsSelectedForRow(row.parentRow, $updatedSelectedDataIds, linkDataSubRows);\n            }\n            return $updatedSelectedDataIds;\n        });\n    };\n    const set = (value) => update(() => value);\n    return {\n        subscribe,\n        update,\n        set,\n    };\n};\nexport const addSelectedRows = ({ initialSelectedDataIds = {}, linkDataSubRows = true, } = {}) => ({ tableState }) => {\n    const selectedDataIds = recordSetStore(initialSelectedDataIds);\n    const getRowState = (row) => {\n        const isSelected = getRowIsSelectedStore(row, selectedDataIds, linkDataSubRows);\n        const isSomeSubRowsSelected = derived([isSelected, selectedDataIds], ([$isSelected, $selectedDataIds]) => {\n            if ($isSelected)\n                return false;\n            return isSomeSubRowsSelectedForRow(row, $selectedDataIds, linkDataSubRows);\n        });\n        const isAllSubRowsSelected = derived(selectedDataIds, ($selectedDataIds) => {\n            return isAllSubRowsSelectedForRow(row, $selectedDataIds, linkDataSubRows);\n        });\n        return {\n            isSelected,\n            isSomeSubRowsSelected,\n            isAllSubRowsSelected,\n        };\n    };\n    // all rows\n    const _allRowsSelected = derived([tableState.rows, selectedDataIds], ([$rows, $selectedDataIds]) => {\n        return $rows.every((row) => {\n            if (!row.isData()) {\n                return true;\n            }\n            return $selectedDataIds[row.dataId] === true;\n        });\n    });\n    const setAllRowsSelected = ($allRowsSelected) => {\n        if ($allRowsSelected) {\n            const $rows = get(tableState.rows);\n            const allDataIds = $rows.map((row) => (row.isData() ? row.dataId : null)).filter(nonNull);\n            selectedDataIds.addAll(allDataIds);\n        }\n        else {\n            selectedDataIds.clear();\n        }\n    };\n    const allRowsSelected = {\n        subscribe: _allRowsSelected.subscribe,\n        update(fn) {\n            const $allRowsSelected = get(_allRowsSelected);\n            setAllRowsSelected(fn($allRowsSelected));\n        },\n        set: setAllRowsSelected,\n    };\n    const someRowsSelected = derived([tableState.rows, selectedDataIds], ([$rows, $selectedDataIds]) => {\n        return $rows.some((row) => {\n            if (!row.isData()) {\n                return false;\n            }\n            return $selectedDataIds[row.dataId] === true;\n        });\n    });\n    // page rows\n    const _allPageRowsSelected = derived([tableState.pageRows, selectedDataIds], ([$pageRows, $selectedDataIds]) => {\n        return $pageRows.every((row) => {\n            if (!row.isData()) {\n                return true;\n            }\n            return $selectedDataIds[row.dataId] === true;\n        });\n    });\n    const setAllPageRowsSelected = ($allPageRowsSelected) => {\n        const $pageRows = get(tableState.pageRows);\n        const pageDataIds = $pageRows\n            .map((row) => (row.isData() ? row.dataId : null))\n            .filter(nonNull);\n        if ($allPageRowsSelected) {\n            selectedDataIds.addAll(pageDataIds);\n        }\n        else {\n            selectedDataIds.removeAll(pageDataIds);\n        }\n    };\n    const allPageRowsSelected = {\n        subscribe: _allPageRowsSelected.subscribe,\n        update(fn) {\n            const $allPageRowsSelected = get(_allPageRowsSelected);\n            setAllPageRowsSelected(fn($allPageRowsSelected));\n        },\n        set: setAllPageRowsSelected,\n    };\n    const somePageRowsSelected = derived([tableState.pageRows, selectedDataIds], ([$pageRows, $selectedDataIds]) => {\n        return $pageRows.some((row) => {\n            if (!row.isData()) {\n                return false;\n            }\n            return $selectedDataIds[row.dataId] === true;\n        });\n    });\n    const pluginState = {\n        selectedDataIds,\n        getRowState,\n        allRowsSelected,\n        someRowsSelected,\n        allPageRowsSelected,\n        somePageRowsSelected,\n    };\n    return {\n        pluginState,\n        hooks: {\n            'tbody.tr': (row) => {\n                const props = derived(selectedDataIds, ($selectedDataIds) => {\n                    const someSubRowsSelected = isSomeSubRowsSelectedForRow(row, $selectedDataIds, linkDataSubRows);\n                    const allSubRowsSelected = isAllSubRowsSelectedForRow(row, $selectedDataIds, linkDataSubRows);\n                    const selected = row.isData()\n                        ? $selectedDataIds[row.dataId] === true\n                        : allSubRowsSelected;\n                    return {\n                        selected,\n                        someSubRowsSelected,\n                        allSubRowsSelected,\n                    };\n                });\n                return { props };\n            },\n        },\n    };\n};\n", "export const compare = (a, b) => {\n    if (Array.isArray(a) && Array.isArray(b)) {\n        return compareArray(a, b);\n    }\n    if (typeof a === 'number' && typeof b === 'number')\n        return a - b;\n    return a < b ? -1 : a > b ? 1 : 0;\n};\nexport const compareArray = (a, b) => {\n    const minLength = Math.min(a.length, b.length);\n    for (let i = 0; i < minLength; i++) {\n        const order = compare(a[i], b[i]);\n        if (order !== 0)\n            return order;\n    }\n    return 0;\n};\n", "import { compare } from '../utils/compare';\nimport { isShiftClick } from '../utils/event';\nimport { derived, writable } from 'svelte/store';\nconst DEFAULT_TOGGLE_ORDER = ['asc', 'desc', undefined];\nexport const createSortKeysStore = (initKeys) => {\n    const { subscribe, update, set } = writable(initKeys);\n    const toggleId = (id, { multiSort = true, toggleOrder = DEFAULT_TOGGLE_ORDER } = {}) => {\n        update(($sortKeys) => {\n            const keyIdx = $sortKeys.findIndex((key) => key.id === id);\n            const key = $sortKeys[keyIdx];\n            const order = key?.order;\n            const orderIdx = toggleOrder.findIndex((o) => o === order);\n            const nextOrderIdx = (orderIdx + 1) % toggleOrder.length;\n            const nextOrder = toggleOrder[nextOrderIdx];\n            if (!multiSort) {\n                if (nextOrder === undefined) {\n                    return [];\n                }\n                return [{ id, order: nextOrder }];\n            }\n            if (keyIdx === -1 && nextOrder !== undefined) {\n                return [...$sortKeys, { id, order: nextOrder }];\n            }\n            if (nextOrder === undefined) {\n                return [...$sortKeys.slice(0, keyIdx), ...$sortKeys.slice(keyIdx + 1)];\n            }\n            return [\n                ...$sortKeys.slice(0, keyIdx),\n                { id, order: nextOrder },\n                ...$sortKeys.slice(keyIdx + 1),\n            ];\n        });\n    };\n    const clearId = (id) => {\n        update(($sortKeys) => {\n            const keyIdx = $sortKeys.findIndex((key) => key.id === id);\n            if (keyIdx === -1) {\n                return $sortKeys;\n            }\n            return [...$sortKeys.slice(0, keyIdx), ...$sortKeys.slice(keyIdx + 1)];\n        });\n    };\n    return {\n        subscribe,\n        update,\n        set,\n        toggleId,\n        clearId,\n    };\n};\nconst getSortedRows = (rows, sortKeys, columnOptions) => {\n    // Shallow clone to prevent sort affecting `preSortedRows`.\n    const $sortedRows = [...rows];\n    $sortedRows.sort((a, b) => {\n        for (const key of sortKeys) {\n            const invert = columnOptions[key.id]?.invert ?? false;\n            // TODO check why cellForId returns `undefined`.\n            const cellA = a.cellForId[key.id];\n            const cellB = b.cellForId[key.id];\n            let order = 0;\n            // Only need to check properties of `cellA` as both should have the same\n            // properties.\n            const getSortValue = columnOptions[key.id]?.getSortValue;\n            if (!cellA.isData()) {\n                return 0;\n            }\n            const valueA = cellA.value;\n            const valueB = cellB.value;\n            if (getSortValue !== undefined) {\n                const sortValueA = getSortValue(valueA);\n                const sortValueB = getSortValue(valueB);\n                order = compare(sortValueA, sortValueB);\n            }\n            else if (typeof valueA === 'string' || typeof valueA === 'number') {\n                // typeof `cellB.value` is logically equal to `cellA.value`.\n                order = compare(valueA, valueB);\n            }\n            else if (valueA instanceof Date && valueB instanceof Date) {\n                order = compare(valueA.getTime(), valueB.getTime());\n            }\n            if (order !== 0) {\n                let orderFactor = 1;\n                // If the current key order is `'desc'`, reverse the order.\n                if (key.order === 'desc') {\n                    orderFactor *= -1;\n                }\n                // If `invert` is `true`, we want to invert the sort without\n                // affecting the view model's indication.\n                if (invert) {\n                    orderFactor *= -1;\n                }\n                return order * orderFactor;\n            }\n        }\n        return 0;\n    });\n    for (let i = 0; i < $sortedRows.length; i++) {\n        const { subRows } = $sortedRows[i];\n        if (subRows === undefined) {\n            continue;\n        }\n        const sortedSubRows = getSortedRows(subRows, sortKeys, columnOptions);\n        const clonedRow = $sortedRows[i].clone();\n        clonedRow.subRows = sortedSubRows;\n        $sortedRows[i] = clonedRow;\n    }\n    return $sortedRows;\n};\nexport const addSortBy = ({ initialSortKeys = [], disableMultiSort = false, isMultiSortEvent = isShiftClick, toggleOrder, serverSide = false, } = {}) => ({ columnOptions }) => {\n    const disabledSortIds = Object.entries(columnOptions)\n        .filter(([, option]) => option.disable === true)\n        .map(([columnId]) => columnId);\n    const sortKeys = createSortKeysStore(initialSortKeys);\n    const preSortedRows = writable([]);\n    const deriveRows = (rows) => {\n        return derived([rows, sortKeys], ([$rows, $sortKeys]) => {\n            preSortedRows.set($rows);\n            if (serverSide) {\n                return $rows;\n            }\n            return getSortedRows($rows, $sortKeys, columnOptions);\n        });\n    };\n    const pluginState = { sortKeys, preSortedRows };\n    return {\n        pluginState,\n        deriveRows,\n        hooks: {\n            'thead.tr.th': (cell) => {\n                const disabled = disabledSortIds.includes(cell.id);\n                const props = derived(sortKeys, ($sortKeys) => {\n                    const key = $sortKeys.find((k) => k.id === cell.id);\n                    const toggle = (event) => {\n                        if (!cell.isData())\n                            return;\n                        if (disabled)\n                            return;\n                        sortKeys.toggleId(cell.id, {\n                            multiSort: disableMultiSort ? false : isMultiSortEvent(event),\n                            toggleOrder,\n                        });\n                    };\n                    const clear = () => {\n                        if (!cell.isData())\n                            return;\n                        if (disabledSortIds.includes(cell.id))\n                            return;\n                        sortKeys.clearId(cell.id);\n                    };\n                    return {\n                        order: key?.order,\n                        toggle,\n                        clear,\n                        disabled,\n                    };\n                });\n                return { props };\n            },\n            'tbody.tr.td': (cell) => {\n                const props = derived(sortKeys, ($sortKeys) => {\n                    const key = $sortKeys.find((k) => k.id === cell.id);\n                    return {\n                        order: key?.order,\n                    };\n                });\n                return { props };\n            },\n        },\n    };\n};\n", "import { DataBodyRow, getSubRows } from '../bodyRows';\nimport { derived } from 'svelte/store';\nconst withSubRows = (row, getChildren) => {\n    const subItems = getChildren(row.original);\n    if (subItems === undefined) {\n        return row;\n    }\n    const subRows = getSubRows(subItems, row);\n    row.subRows = subRows.map((row) => withSubRows(row, getChildren));\n    return row;\n};\nexport const addSubRows = ({ children, }) => () => {\n    const getChildren = children instanceof Function ? children : (item) => item[children];\n    const deriveRows = (rows) => {\n        return derived(rows, ($rows) => {\n            return $rows.map((row) => {\n                if (row.isData()) {\n                    return withSubRows(row, getChildren);\n                }\n                return row;\n            });\n        });\n    };\n    return {\n        pluginState: {},\n        deriveRows,\n    };\n};\n", "import { recordSetStore } from '../utils/store';\nimport { derived, writable } from 'svelte/store';\nconst getFilteredRows = (rows, filterValue, columnOptions, { tableCellMatches, fn, includeHiddenColumns }) => {\n    const $filteredRows = rows\n        // Filter `subRows`\n        .map((row) => {\n        const { subRows } = row;\n        if (subRows === undefined) {\n            return row;\n        }\n        const filteredSubRows = getFilteredRows(subRows, filterValue, columnOptions, {\n            tableCellMatches,\n            fn,\n            includeHiddenColumns,\n        });\n        const clonedRow = row.clone();\n        clonedRow.subRows = filteredSubRows;\n        return clonedRow;\n    })\n        .filter((row) => {\n        if ((row.subRows?.length ?? 0) !== 0) {\n            return true;\n        }\n        // An array of booleans, true if the cell matches the filter.\n        const rowCellMatches = Object.values(row.cellForId).map((cell) => {\n            const options = columnOptions[cell.id];\n            if (options?.exclude === true) {\n                return false;\n            }\n            const isHidden = row.cells.find((c) => c.id === cell.id) === undefined;\n            if (isHidden && !includeHiddenColumns) {\n                return false;\n            }\n            if (!cell.isData()) {\n                return false;\n            }\n            let value = cell.value;\n            if (options?.getFilterValue !== undefined) {\n                value = options?.getFilterValue(value);\n            }\n            const matches = fn({ value: String(value), filterValue });\n            if (matches) {\n                const dataRowColId = cell.dataRowColId();\n                if (dataRowColId !== undefined) {\n                    tableCellMatches[dataRowColId] = matches;\n                }\n            }\n            return matches;\n        });\n        // If any cell matches, include in the filtered results.\n        return rowCellMatches.includes(true);\n    });\n    return $filteredRows;\n};\nexport const addTableFilter = ({ fn = textPrefixFilter, initialFilterValue = '', includeHiddenColumns = false, serverSide = false, } = {}) => ({ columnOptions }) => {\n    const filterValue = writable(initialFilterValue);\n    const preFilteredRows = writable([]);\n    const tableCellMatches = recordSetStore();\n    const pluginState = { filterValue, preFilteredRows };\n    const deriveRows = (rows) => {\n        return derived([rows, filterValue], ([$rows, $filterValue]) => {\n            preFilteredRows.set($rows);\n            tableCellMatches.clear();\n            const $tableCellMatches = {};\n            const $filteredRows = getFilteredRows($rows, $filterValue, columnOptions, {\n                tableCellMatches: $tableCellMatches,\n                fn,\n                includeHiddenColumns,\n            });\n            tableCellMatches.set($tableCellMatches);\n            if (serverSide) {\n                return $rows;\n            }\n            return $filteredRows;\n        });\n    };\n    return {\n        pluginState,\n        deriveRows,\n        hooks: {\n            'tbody.tr.td': (cell) => {\n                const props = derived([filterValue, tableCellMatches], ([$filterValue, $tableCellMatches]) => {\n                    const dataRowColId = cell.dataRowColId();\n                    return {\n                        matches: $filterValue !== '' &&\n                            dataRowColId !== undefined &&\n                            ($tableCellMatches[dataRowColId] ?? false),\n                    };\n                });\n                return { props };\n            },\n        },\n    };\n};\nexport const textPrefixFilter = ({ filterValue, value }) => {\n    if (filterValue === '') {\n        return true;\n    }\n    return String(value).toLowerCase().startsWith(String(filterValue).toLowerCase());\n};\n"],
  "mappings": "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",
  "names": ["newCell", "cell", "key", "row", "getFilteredRows", "textPrefixFilter"]
}
