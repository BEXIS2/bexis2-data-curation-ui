{
  "version": 3,
  "sources": ["../../svelte-subscribe/derivedKeys.js", "../../svelte-subscribe/Subscribe.svelte", "../../svelte-headless-table/utils/css.js", "../../svelte-headless-table/utils/attributes.js", "../../svelte-headless-table/tableComponent.js", "../../svelte-headless-table/bodyCells.js", "../../svelte-headless-table/utils/filter.js", "../../svelte-headless-table/bodyRows.js", "../../svelte-headless-table/utils/math.js"],
  "sourcesContent": ["import { derived } from 'svelte/store';\nexport const derivedKeys = (storeMap) => {\n    // Freeze the order of entries.\n    const entries = Object.entries(storeMap);\n    const keys = entries.map(([key]) => key);\n    return derived(entries.map(([, store]) => store), ($stores) => {\n        return Object.fromEntries($stores.map((store, idx) => [keys[idx], store]));\n    });\n};\n", null, "export const stringifyCss = (style) => {\n    return Object.entries(style)\n        .map(([name, value]) => `${name}:${value}`)\n        .join(';');\n};\n", "import { stringifyCss } from './css';\nexport const mergeAttributes = (a, b) => {\n    if (a.style === undefined && b.style === undefined) {\n        return { ...a, ...b };\n    }\n    return {\n        ...a,\n        ...b,\n        style: {\n            ...(typeof a.style === 'object' ? a.style : {}),\n            ...(typeof b.style === 'object' ? b.style : {}),\n        },\n    };\n};\nexport const finalizeAttributes = (attrs) => {\n    if (attrs.style === undefined || typeof attrs.style !== 'object') {\n        return attrs;\n    }\n    return {\n        ...attrs,\n        style: stringifyCss(attrs.style),\n    };\n};\n", "import { derived } from 'svelte/store';\nimport { derivedKeys } from 'svelte-subscribe';\nimport { finalizeAttributes, mergeAttributes } from './utils/attributes';\nexport class TableComponent {\n    id;\n    constructor({ id }) {\n        this.id = id;\n    }\n    attrsForName = {};\n    attrs() {\n        return derived(Object.values(this.attrsForName), ($attrsArray) => {\n            let $mergedAttrs = {};\n            $attrsArray.forEach(($attrs) => {\n                $mergedAttrs = mergeAttributes($mergedAttrs, $attrs);\n            });\n            return finalizeAttributes($mergedAttrs);\n        });\n    }\n    propsForName = {};\n    props() {\n        return derivedKeys(this.propsForName);\n    }\n    state;\n    injectState(state) {\n        this.state = state;\n    }\n    applyHook(pluginName, hook) {\n        if (hook.props !== undefined) {\n            this.propsForName[pluginName] = hook.props;\n        }\n        if (hook.attrs !== undefined) {\n            this.attrsForName[pluginName] = hook.attrs;\n        }\n    }\n}\n", "import { derived } from 'svelte/store';\nimport { TableComponent } from './tableComponent';\nexport class BodyCell extends TableComponent {\n    row;\n    constructor({ id, row }) {\n        super({ id });\n        this.row = row;\n    }\n    attrs() {\n        return derived(super.attrs(), ($baseAttrs) => {\n            return {\n                ...$baseAttrs,\n                role: 'cell',\n            };\n        });\n    }\n    rowColId() {\n        return `${this.row.id}:${this.column.id}`;\n    }\n    dataRowColId() {\n        if (!this.row.isData()) {\n            return undefined;\n        }\n        return `${this.row.dataId}:${this.column.id}`;\n    }\n    // TODO Workaround for https://github.com/vitejs/vite/issues/9528\n    isData() {\n        return '__data' in this;\n    }\n    // TODO Workaround for https://github.com/vitejs/vite/issues/9528\n    isDisplay() {\n        return '__display' in this;\n    }\n}\nexport class DataBodyCell extends BodyCell {\n    // TODO Workaround for https://github.com/vitejs/vite/issues/9528\n    __data = true;\n    column;\n    label;\n    value;\n    constructor({ row, column, label, value }) {\n        super({ id: column.id, row });\n        this.column = column;\n        this.label = label;\n        this.value = value;\n    }\n    render() {\n        if (this.label === undefined) {\n            return `${this.value}`;\n        }\n        if (this.state === undefined) {\n            throw new Error('Missing `state` reference');\n        }\n        return this.label(this, this.state);\n    }\n    clone() {\n        const clonedCell = new DataBodyCell({\n            row: this.row,\n            column: this.column,\n            label: this.label,\n            value: this.value,\n        });\n        return clonedCell;\n    }\n}\nexport class DisplayBodyCell extends BodyCell {\n    // TODO Workaround for https://github.com/vitejs/vite/issues/9528\n    __display = true;\n    column;\n    label;\n    constructor({ row, column, label }) {\n        super({ id: column.id, row });\n        this.column = column;\n        this.label = label;\n    }\n    render() {\n        if (this.state === undefined) {\n            throw new Error('Missing `state` reference');\n        }\n        return this.label(this, this.state);\n    }\n    clone() {\n        const clonedCell = new DisplayBodyCell({\n            row: this.row,\n            column: this.column,\n            label: this.label,\n        });\n        return clonedCell;\n    }\n}\n", "export const nonNull = (value) => value !== null;\nexport const nonUndefined = (value) => value !== undefined;\nexport const nonNullish = (value) => value != null;\nexport const isNumber = (value) => typeof value === 'number';\n", "import { derived } from 'svelte/store';\nimport { BodyCell, DataBodyCell, DisplayBodyCell } from './bodyCells';\nimport { TableComponent } from './tableComponent';\nimport { nonUndefined } from './utils/filter';\nexport class BodyRow extends TableComponent {\n    cells;\n    /**\n     * Get the cell with a given column id.\n     *\n     * **This includes hidden cells.**\n     */\n    cellForId;\n    depth;\n    parentRow;\n    subRows;\n    constructor({ id, cells, cellForId, depth = 0, parentRow }) {\n        super({ id });\n        this.cells = cells;\n        this.cellForId = cellForId;\n        this.depth = depth;\n        this.parentRow = parentRow;\n    }\n    attrs() {\n        return derived(super.attrs(), ($baseAttrs) => {\n            return {\n                ...$baseAttrs,\n                role: 'row',\n            };\n        });\n    }\n    // TODO Workaround for https://github.com/vitejs/vite/issues/9528\n    isData() {\n        return '__data' in this;\n    }\n    // TODO Workaround for https://github.com/vitejs/vite/issues/9528\n    isDisplay() {\n        return '__display' in this;\n    }\n}\nexport class DataBodyRow extends BodyRow {\n    // TODO Workaround for https://github.com/vitejs/vite/issues/9528\n    __data = true;\n    dataId;\n    original;\n    constructor({ id, dataId, original, cells, cellForId, depth = 0, parentRow, }) {\n        super({ id, cells, cellForId, depth, parentRow });\n        this.dataId = dataId;\n        this.original = original;\n    }\n    clone({ includeCells = false, includeSubRows = false } = {}) {\n        const clonedRow = new DataBodyRow({\n            id: this.id,\n            dataId: this.dataId,\n            cellForId: this.cellForId,\n            cells: this.cells,\n            original: this.original,\n            depth: this.depth,\n        });\n        if (includeCells) {\n            const clonedCellsForId = Object.fromEntries(Object.entries(clonedRow.cellForId).map(([id, cell]) => {\n                const clonedCell = cell.clone();\n                clonedCell.row = clonedRow;\n                return [id, clonedCell];\n            }));\n            const clonedCells = clonedRow.cells.map(({ id }) => clonedCellsForId[id]);\n            clonedRow.cellForId = clonedCellsForId;\n            clonedRow.cells = clonedCells;\n        }\n        if (includeSubRows) {\n            const clonedSubRows = this.subRows?.map((row) => row.clone({ includeCells, includeSubRows }));\n            clonedRow.subRows = clonedSubRows;\n        }\n        else {\n            clonedRow.subRows = this.subRows;\n        }\n        return clonedRow;\n    }\n}\nexport class DisplayBodyRow extends BodyRow {\n    // TODO Workaround for https://github.com/vitejs/vite/issues/9528\n    __display = true;\n    constructor({ id, cells, cellForId, depth = 0, parentRow }) {\n        super({ id, cells, cellForId, depth, parentRow });\n    }\n    clone({ includeCells = false, includeSubRows = false } = {}) {\n        const clonedRow = new DisplayBodyRow({\n            id: this.id,\n            cellForId: this.cellForId,\n            cells: this.cells,\n            depth: this.depth,\n        });\n        clonedRow.subRows = this.subRows;\n        if (includeCells) {\n            const clonedCellsForId = Object.fromEntries(Object.entries(clonedRow.cellForId).map(([id, cell]) => {\n                const clonedCell = cell.clone();\n                clonedCell.row = clonedRow;\n                return [id, clonedCell];\n            }));\n            const clonedCells = clonedRow.cells.map(({ id }) => clonedCellsForId[id]);\n            clonedRow.cellForId = clonedCellsForId;\n            clonedRow.cells = clonedCells;\n        }\n        if (includeSubRows) {\n            const clonedSubRows = this.subRows?.map((row) => row.clone({ includeCells, includeSubRows }));\n            clonedRow.subRows = clonedSubRows;\n        }\n        else {\n            clonedRow.subRows = this.subRows;\n        }\n        return clonedRow;\n    }\n}\n/**\n * Converts an array of items into an array of table `BodyRow`s based on the column structure.\n * @param data The data to display.\n * @param flatColumns The column structure.\n * @returns An array of `BodyRow`s representing the table structure.\n */\nexport const getBodyRows = (data, \n/**\n * Flat columns before column transformations.\n */\nflatColumns, { rowDataId } = {}) => {\n    const rows = data.map((item, idx) => {\n        const id = idx.toString();\n        return new DataBodyRow({\n            id,\n            dataId: rowDataId !== undefined ? rowDataId(item, idx) : id,\n            original: item,\n            cells: [],\n            cellForId: {},\n        });\n    });\n    data.forEach((item, rowIdx) => {\n        const cells = flatColumns.map((col) => {\n            if (col.isData()) {\n                const dataCol = col;\n                const value = dataCol.getValue(item);\n                return new DataBodyCell({\n                    row: rows[rowIdx],\n                    column: dataCol,\n                    label: col.cell,\n                    value,\n                });\n            }\n            if (col.isDisplay()) {\n                const displayCol = col;\n                return new DisplayBodyCell({\n                    row: rows[rowIdx],\n                    column: displayCol,\n                    label: col.cell,\n                });\n            }\n            throw new Error('Unrecognized `FlatColumn` implementation');\n        });\n        rows[rowIdx].cells = cells;\n        flatColumns.forEach((c, colIdx) => {\n            rows[rowIdx].cellForId[c.id] = cells[colIdx];\n        });\n    });\n    return rows;\n};\n/**\n * Arranges and hides columns in an array of `BodyRow`s based on\n * `columnIdOrder` by transforming the `cells` property of each row.\n *\n * `cellForId` should remain unaffected.\n *\n * @param rows The rows to transform.\n * @param columnIdOrder The column order to transform to.\n * @returns A new array of `BodyRow`s with corrected row references.\n */\nexport const getColumnedBodyRows = (rows, columnIdOrder) => {\n    const columnedRows = rows.map((row) => {\n        const clonedRow = row.clone();\n        clonedRow.cells = [];\n        clonedRow.cellForId = {};\n        return clonedRow;\n    });\n    if (rows.length === 0 || columnIdOrder.length === 0)\n        return rows;\n    rows.forEach((row, rowIdx) => {\n        // Create a shallow copy of `row.cells` to reassign each `cell`'s `row`\n        // reference.\n        const cells = row.cells.map((cell) => {\n            const clonedCell = cell.clone();\n            clonedCell.row = columnedRows[rowIdx];\n            return clonedCell;\n        });\n        const visibleCells = columnIdOrder\n            .map((cid) => {\n            return cells.find((c) => c.id === cid);\n        })\n            .filter(nonUndefined);\n        columnedRows[rowIdx].cells = visibleCells;\n        // Include hidden cells in `cellForId` to allow row transformations on\n        // hidden cells.\n        cells.forEach((cell) => {\n            columnedRows[rowIdx].cellForId[cell.id] = cell;\n        });\n    });\n    return columnedRows;\n};\n/**\n * Converts an array of items into an array of table `BodyRow`s based on a parent row.\n * @param subItems The sub data to display.\n * @param parentRow The parent row.\n * @returns An array of `BodyRow`s representing the child rows of `parentRow`.\n */\nexport const getSubRows = (subItems, parentRow, { rowDataId } = {}) => {\n    const subRows = subItems.map((item, idx) => {\n        const id = `${parentRow.id}>${idx}`;\n        return new DataBodyRow({\n            id,\n            dataId: rowDataId !== undefined ? rowDataId(item, idx) : id,\n            original: item,\n            cells: [],\n            cellForId: {},\n            depth: parentRow.depth + 1,\n            parentRow,\n        });\n    });\n    subItems.forEach((item, rowIdx) => {\n        // parentRow.cells only include visible cells.\n        // We have to derive all cells from parentRow.cellForId\n        const cellForId = Object.fromEntries(Object.values(parentRow.cellForId).map((cell) => {\n            const { column } = cell;\n            if (column.isData()) {\n                const dataCol = column;\n                const value = dataCol.getValue(item);\n                return [\n                    column.id,\n                    new DataBodyCell({ row: subRows[rowIdx], column, label: column.cell, value }),\n                ];\n            }\n            if (column.isDisplay()) {\n                return [\n                    column.id,\n                    new DisplayBodyCell({ row: subRows[rowIdx], column, label: column.cell }),\n                ];\n            }\n            throw new Error('Unrecognized `FlatColumn` implementation');\n        }));\n        subRows[rowIdx].cellForId = cellForId;\n        const cells = parentRow.cells.map((cell) => {\n            return cellForId[cell.id];\n        });\n        subRows[rowIdx].cells = cells;\n    });\n    return subRows;\n};\n", "export const sum = (nums) => nums.reduce((a, b) => a + b, 0);\nexport const mean = (nums) => (nums.length === 0 ? 0 : sum(nums) / nums.length);\n"],
  "mappings": "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",
  "names": []
}
