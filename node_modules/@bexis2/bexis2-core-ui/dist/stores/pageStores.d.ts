import type { helpItemType, helpStoreType, notificationItemType, notificationStoreType } from '../models/Models';
import type { MenuModel, breadcrumbItemType } from '../models/Page';
import { BreadcrumbModel } from '../models/Page';
import { type Writable } from 'svelte/store';
export declare const helpStore: {
    subscribe: (this: void, run: import("svelte/store").Subscriber<helpStoreType>, invalidate?: ((value?: helpStoreType | undefined) => void) | undefined) => import("svelte/store").Unsubscriber;
    set: (this: void, value: helpStoreType) => void;
    update: (this: void, updater: import("svelte/store").Updater<helpStoreType>) => void;
    setHelpItemList: (helpItems: helpItemType[]) => void;
    setItemId: (itemId: string) => void;
    resetItemId: () => void;
    show: (itemId: string) => void;
    showHelpItem: (helpItem: helpItemType) => void;
    hide: () => void;
    toggle: (itemId: string) => void;
    reset: () => void;
    clear: () => void;
};
export declare const menuStore: Writable<MenuModel>;
export declare const breadcrumbStore: {
    subscribe: (this: void, run: import("svelte/store").Subscriber<BreadcrumbModel>, invalidate?: ((value?: BreadcrumbModel | undefined) => void) | undefined) => import("svelte/store").Unsubscriber;
    set: (this: void, value: BreadcrumbModel) => void;
    update: (this: void, updater: import("svelte/store").Updater<BreadcrumbModel>) => void;
    addItem: (item: breadcrumbItemType) => void;
    updateItem: (item: breadcrumbItemType) => void;
    clean: () => void;
};
export declare const notificationStore: {
    subscribe: (this: void, run: import("svelte/store").Subscriber<notificationStoreType>, invalidate?: ((value?: notificationStoreType | undefined) => void) | undefined) => import("svelte/store").Unsubscriber;
    set: (this: void, value: notificationStoreType) => void;
    update: (this: void, updater: import("svelte/store").Updater<notificationStoreType>) => void;
    setNotification: (notificationItem: notificationItemType) => void;
    triggerNotification: () => void;
    clear: () => void;
    showNotification: (notificationItem: notificationItemType) => void;
    getBtnStyle: () => string;
};
