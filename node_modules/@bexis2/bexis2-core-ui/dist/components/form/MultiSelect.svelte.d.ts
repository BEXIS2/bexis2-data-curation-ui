/** @typedef {typeof __propDef.props}  MultiSelectProps */
/** @typedef {typeof __propDef.events}  MultiSelectEvents */
/** @typedef {typeof __propDef.slots}  MultiSelectSlots */
export default class MultiSelect extends SvelteComponentTyped<{
    target: any;
    id: any;
    title: any;
    source: any;
    required?: boolean | undefined;
    invalid?: boolean | undefined;
    feedback?: string[] | undefined;
    complexTarget?: boolean | undefined;
    help?: boolean | undefined;
    itemId?: string | undefined;
    itemLabel?: string | undefined;
    itemGroup?: string | undefined;
    isMulti?: boolean | undefined;
    complexSource?: boolean | undefined;
    placeholder?: string | undefined;
    loading?: boolean | undefined;
    clearable?: boolean | undefined;
}, {
    change: CustomEvent<any>;
    input: CustomEvent<any>;
    focus: CustomEvent<any>;
    blur: CustomEvent<any>;
    clear: CustomEvent<any>;
    loaded: CustomEvent<any>;
    error: CustomEvent<any>;
    filter: CustomEvent<any>;
    hoverItem: CustomEvent<any>;
} & {
    [evt: string]: CustomEvent<any>;
}, {}> {
}
export type MultiSelectProps = typeof __propDef.props;
export type MultiSelectEvents = typeof __propDef.events;
export type MultiSelectSlots = typeof __propDef.slots;
import { SvelteComponentTyped } from "svelte";
declare const __propDef: {
    props: {
        target: any;
        id: any;
        title: any;
        source: any;
        required?: boolean | undefined;
        invalid?: boolean | undefined;
        feedback?: string[] | undefined;
        complexTarget?: boolean | undefined;
        help?: boolean | undefined;
        itemId?: string | undefined;
        itemLabel?: string | undefined;
        itemGroup?: string | undefined;
        isMulti?: boolean | undefined;
        complexSource?: boolean | undefined;
        placeholder?: string | undefined;
        loading?: boolean | undefined;
        clearable?: boolean | undefined;
    };
    events: {
        change: CustomEvent<any>;
        input: CustomEvent<any>;
        focus: CustomEvent<any>;
        blur: CustomEvent<any>;
        clear: CustomEvent<any>;
        loaded: CustomEvent<any>;
        error: CustomEvent<any>;
        filter: CustomEvent<any>;
        hoverItem: CustomEvent<any>;
    } & {
        [evt: string]: CustomEvent<any>;
    };
    slots: {};
};
export {};
