import type { SvelteComponent } from 'svelte';
import type { ColumnFilterFn } from 'svelte-headless-table/lib/plugins';
import type { Writable } from 'svelte/store';
import type { decimalCharacterType, notificationType, orientationType, textMarkerType, textSeperatorType } from './Enums';
export interface linkType {
    label: string;
    url: string;
}
export interface inputType {
    id: string;
    label: string;
    feedback: string[];
    invalid: boolean;
    valid: boolean;
    required: boolean;
    placeholder: string;
}
export interface fileInfoType {
    name: string;
    type: string;
    length: number;
    description: string;
    validationHash: string;
}
export interface fileUploaderType {
    accept: string[];
    existingFiles: fileInfoType[];
    descriptionType: number;
    multiple: boolean;
    maxSize: number;
}
export interface asciiFileReaderInfoType extends fileReaderInfoType {
    cells: boolean[];
    seperator: textSeperatorType;
    textMarker: textMarkerType;
}
export interface fileReaderInfoType {
    decimal: decimalCharacterType;
    orientation: orientationType;
    offset: number;
    variables: number;
    data: number;
    unit: number;
    description: number;
    dateformat: string;
}
export interface filesType {
    accepted: Blob[];
    rejected: Blob[];
}
export type userType = {
    name: string;
};
export interface fileObjType {
    path: string;
    lastModified: number;
    lastModifiedDate: Date;
    name: string;
    size: number;
    type: string;
    webkitRelativePath: string;
}
export interface ColumnInstructions {
    toStringFn?: (value: any) => string;
    toSortableValueFn?: (value: any) => string | number;
    toFilterableValueFn?: (value: any) => string | number | Date;
    renderComponent?: typeof SvelteComponent;
}
export interface Column {
    header?: string;
    exclude?: boolean;
    instructions?: ColumnInstructions;
    disableFiltering?: boolean;
    disableSorting?: boolean;
    colFilterFn?: ColumnFilterFn;
    colFilterComponent?: typeof SvelteComponent;
}
export interface Columns {
    [key: string]: Column;
}
export interface TableConfig<T> {
    id: string;
    data: Writable<T[]>;
    toggle?: boolean;
    fitToScreen?: boolean;
    height?: null | number;
    columns?: Columns;
    pageSizes?: number[];
    defaultPageSize?: number;
    optionsComponent?: typeof SvelteComponent;
}
export interface keyValuePairType {
    id: number;
    text: string;
}
export interface listItemType {
    id: number;
    text: string;
    group: string;
}
export interface helpItemType {
    id?: string;
    name: string;
    description: string;
    link?: string;
}
export interface helpStoreType {
    itemId?: string;
    helpItems: helpItemType[];
}
export interface notificationItemType {
    notificationType?: notificationType;
    message: string;
}
export interface notificationStoreType {
    notificationType: notificationType;
    message: string;
    btnStyle: string;
}
