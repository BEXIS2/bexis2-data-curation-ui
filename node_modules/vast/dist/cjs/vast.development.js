'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var vestUtils = require('vest-utils');

// eslint-disable-next-line max-lines-per-function
function createState(onStateChange) {
    var state = {
        references: []
    };
    var registrations = [];
    return {
        registerStateKey: registerStateKey,
        reset: reset
    };
    /**
     * Registers a new key in the state, takes the initial value (may be a function that returns the initial value), returns a function.
     *
     * @example
     *
     * const useColor = state.registerStateKey("blue");
     *
     * let [color, setColor] = useColor(); // -> ["blue", Function]
     *
     * setColor("green");
     *
     * useColor()[0]; -> "green"
     */
    function registerStateKey(initialState, onUpdate) {
        var key = registrations.length;
        registrations.push([initialState, onUpdate]);
        return initKey(key, initialState);
    }
    function reset() {
        var prev = current();
        state.references = [];
        registrations.forEach(function (_a, index) {
            var initialValue = _a[0];
            return initKey(index, initialValue, prev[index]);
        });
    }
    function initKey(key, initialState, prevState) {
        current().push();
        set(key, vestUtils.optionalFunctionValue(initialState, prevState));
        return function useStateKey() {
            return [
                current()[key],
                function (nextState) {
                    return set(key, vestUtils.optionalFunctionValue(nextState, current()[key]));
                },
            ];
        };
    }
    function current() {
        return state.references;
    }
    function set(index, value) {
        var prevValue = state.references[index];
        state.references[index] = value;
        var _a = registrations[index], onUpdate = _a[1];
        if (vestUtils.isFunction(onUpdate)) {
            onUpdate(value, prevValue);
        }
        if (vestUtils.isFunction(onStateChange)) {
            onStateChange();
        }
    }
}

exports.createState = createState;
